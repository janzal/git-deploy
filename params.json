{"name":"git-deploy","tagline":"Node.js based git deployment system.","body":"git-deploy\r\n==========\r\n\r\ngit-deploy is simple and easy-to-use git deployment tool. There is lot of functionality that just works out of the box. Other things can be done through configuration, saved in .deployfile.\r\n\r\nUsage\r\n-----\r\n\r\n\tnpm install -g node-git-deploy\r\n\tgit-deploy <config>\r\n\t\r\nConfig\r\n------\r\n\r\nConfig is stored in yaml file. This tool is super easy to config! No magic, it just works. Example config is in YAML, but you can use JSON as well.\r\n\r\nAre you scared of large and magic configuration files? Not anymore. Just few lines of config does the work.\r\n\r\n\ttemp: \"/tmp/git-deploy\"\r\n\t\r\n\tapplications:\r\n\t  SimpleApp:\r\n\t      branches:\r\n\t          master:\r\n\t              destination: \"/var/apps/SimpleApp/master\"\r\n\r\n### Full-featured config\r\n\r\n\t#\r\n\t# git-deploy example config\r\n\t#\r\n\t\r\n\t# temp is used by some deploy strategies for storing some backup files\r\n\ttemp: \"/tmp/git-deploy\"\r\n\tport: 3929\r\n\tserver_name: \"janzal\"\r\n\t\r\n\t# enable/disable ui\r\n\tui: true\r\n\t# key-value basic authorization for UI controls\r\n\t# auth:\r\n\t#    admin: \"123456\"\r\n\t\r\n\t# object of deployed applications\r\n\t# keys are application identifiers and values are objects containing deployment details\r\n\tapplications:\r\n\t\r\n\t  firstApp: # app name\r\n\t    # these three items are only mandatory for deployment\r\n\t    handler: \"bitbucket\" # handler - currently is supported only bitbucket and github\r\n\t    strategy: \"hardcore\" # there are plenty of strategies, which can be used for deploy. Currently is supported only hardcore\r\n\t\r\n\t    branches:\r\n\t        # branch deploy configuration\r\n\t        master:\r\n\t            destination: \"/Users/janzaloudek/Development/misc/xx/deploy/firstApp/master\" # where to deploy application\r\n\t            # post_deploy and pre_deploy will be executed in context of destination folder\r\n\t            post_deploy: \"composer install\"\r\n\t            pre_deploy: \"\"\r\n\t\r\n\t        # ...and you can handle multiple branches\r\n\t        dev:\r\n\t            destination: \"/Users/janzaloudek/Development/misc/xx/deploy/firstApp/dev\"\r\n\t\r\n\t        staging:\r\n\t            destination: \"/Users/janzaloudek/Development/misc/xx/deploy/firstApp/staging\"\r\n\r\n\t\r\nConfig contains list of applications and their configurations, which can be deployed on current server.\r\n\r\n\r\n.deployfile\r\n-----------\r\nDeploy file should be in your project root. It is not mandatory to use .deployfile, but there you can override server actions. It uses also uses YAML. Currently, there is only `post_deploy` parameter.\r\n\r\n\tmaster:\r\n\t\tpost_deploy: \"composer update; composer install\"\r\n\t\r\n\tdev:\r\n\t\toverride: false\r\n\t\tpost_deploy: \"npm install; composer install\"\r\n\t\r\n\r\nInstalation\r\n-----------\r\nJust run\r\n\r\n\tnpm install\t\t\r\n\tgulp\r\n\r\nJob done!\r\n\r\n\r\nTesting\r\n-------\r\n\r\n\tgulp test\r\n\t\r\n\r\nLicense\r\n-------\r\nThe MIT License (MIT)","google":"UA-40375008-3","note":"Don't delete this file! It's used internally to help with page regeneration."}